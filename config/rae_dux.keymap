/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <750>;
};

#define RSTHD 0
#define NUM   1
#define SYM   2
#define NAV   3
#define FUN   4

#define MY_PSCRN LS(LC(PSCRN))
#define MY_COPY LC(INSERT)
#define MY_PASTE LS(INSERT)
#define VI_U LC(Z)
#define VI_W LC(RIGHT)
#define VI_B LC(LEFT)

/ {
    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17>;
        };

        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };


        hold_lt: layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		// This is a sample keymap intended to be replaced with your own
		// base_layer {
		// 	bindings = <
		// 		&kp Q     &kp W     &kp E     &kp R     &kp T     &kp Y     &kp U     &kp I     &kp O     &kp P
		// 		&kp A     &kp S     &kp D     &kp F     &kp G     &kp H     &kp J     &kp K     &kp L     &kp SEMI
		// 		&kp Z     &kp X     &kp C     &kp V     &kp B     &kp N     &kp M     &kp COMMA &kp DOT   &kp SLASH
		// 		                    &kp ESC   &kp TAB   &kp BSPC  &kp SPACE &kp ENTER &kp ESC
		// 	>;
		// };

        // RSTHD
		rsthd_layer {
			bindings = <
                   &kp Z        &kp C         &kp Y         &kp F            &kp P              &kp X             &kp M          &kp APOS      &kp U         &kp Q
                   &lhm LALT R  &lhm LSHFT S  &lhm LCTRL T  &lhm LGUI H      &kp D              &kp L             &rhm LGUI N    &rhm LCTRL A  &rhm LSHFT I  &rhm LALT O
                   &sk LSHIFT   &kp V         &kp G         &kp K            &kp B              &kp W             &kp J          &kp COMMA     &kp DOT       &sk LSHIFT
				 /*&            &*/           &kp ESC       &base_lt NAV SPC &hold_lt SYM ENTER &hold_lt SYM BSPC &base_lt NUM E &kp TAB    /* &             &*/
			>;
		};

		num_layer {
			bindings = <
                   &trans       &kp LT        &kp MINUS     &kp GT           &trans             &trans            &trans         &kp EQUAL     &trans        &trans
                   &lhm LALT N3 &lhm LSHFT N2 &lhm LCTRL N1 &lhm LGUI N0     &kp N4             &kp N5            &rhm LGUI N6   &rhm LCTRL N7 &rhm LSHFT N8 &rhm LALT N9
                   &kp FSLH     &kp PLUS      &kp CARET     &kp STAR         &trans             &trans            &trans         &kp COMMA     &kp DOT       &trans
				 /*&            &*/           &trans        &trans           &trans             &trans            &trans         &trans    /*  &             &*/
			>;
		};

		sym_layer {
			bindings = <
                   &trans       &kp EXCL      &kp AT        &kp DLLR         &trans             &trans            &kp TILDE      &kp EQUAL     &kp BSLH      &trans
                   &kp HASH     &kp LT        &kp MINUS     &kp GT           &kp GRAVE          &kp AMPS          &kp LBRC       &kp LPAR      &kp RPAR      &kp PIPE
                   &kp FSLH     &kp PLUS      &kp CARET     &kp STAR         &kp UNDER          &kp PRCNT         &kp RBRC       &kp LBKT      &kp RBKT      &trans
				 /*&            &*/           &trans        &trans           &trans             &trans            &trans         &trans    /*  &             &*/
			>;
		};

		nav_layer {
			bindings = <
                   &trans       &kp PSCRN     &kp MY_COPY   &kp MY_PSCRN     &kp MY_PASTE       &trans            &kp C_BRI_DEC  &kp C_BRI_INC &kp VI_U      &trans
                   &kp END      &kp C_NEXT    &kp C_PP      &kp C_VOL_UP     &kp DEL            &kp LEFT          &kp DOWN       &kp UP        &kp RIGHT     &kp HOME
                   &trans       &kp C_PREV    &kp C_MUTE    &kp C_VOL_DN     &kp UNDER          &kp VI_B          &kp PG_DN      &kp PG_UP     &kp VI_W      &trans
				 /*&            &*/           &trans        &trans           &trans             &bt BT_PRV        &bt BT_NXT     &bt BT_CLR /* &             &*/
			>;
		};
	};
};
